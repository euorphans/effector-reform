"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[266],{7095:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>m,default:()=>g,frontMatter:()=>d,metadata:()=>u,toc:()=>c});var r=a(4848),t=a(8453),s=a(9084),l=a(1807);const i=(0,s.DG)({schema:{a:"string",b:0,c:[],d:{e:"string 2",f:(0,s.mJ)([])}}}),o=()=>{const{fields:e}=(0,l.mN)(i);return(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)("form",{children:[(0,r.jsx)("p",{children:"string field"}),(0,r.jsx)("input",{value:e.a.value,onChange:n=>e.a.onChange(n.currentTarget.value)}),(0,r.jsx)("p",{children:"number field"}),(0,r.jsx)("input",{value:e.b.value,inputMode:"numeric",onChange:n=>e.b.onChange(parseInt(n.currentTarget.value))}),(0,r.jsx)("p",{children:"array field"}),(0,r.jsxs)("div",{children:[e.c.values.map(((n,a)=>(0,r.jsx)("span",{onClick:()=>e.c.remove({index:a}),children:n}))),(0,r.jsx)("button",{type:"button",onClick:()=>e.c.push(Math.random()),children:"add num"})]}),(0,r.jsx)("p",{children:"field in group"}),(0,r.jsx)("input",{value:e.d.e.value,onChange:n=>e.d.e.onChange(n.currentTarget.value)}),(0,r.jsx)("p",{children:"array with subfields"}),(0,r.jsxs)("div",{children:[e.d.f.values.map((e=>(0,r.jsx)("input",{value:e.name.value,onChange:n=>e.name.onChange(n.currentTarget.value)}))),(0,r.jsx)("button",{type:"button",onClick:()=>e.d.f.push({name:""}),children:"add friend"})]})]})})},d={sidebar_position:1,title:"Base form example",id:"base-form",tags:["Learn","Getting started","Base form","Example","Examples"]},m=void 0,u={id:"learn/examples/base-form",title:"Base form example",description:"",source:"@site/docs/learn/examples/base-form.mdx",sourceDirName:"learn/examples",slug:"/learn/examples/base-form",permalink:"/docs/learn/examples/base-form",draft:!1,unlisted:!1,editUrl:"https://github.com/movpushmov/effector-reform/tree/main/docs/docs/learn/examples/base-form.mdx",tags:[{label:"Learn",permalink:"/docs/tags/learn"},{label:"Getting started",permalink:"/docs/tags/getting-started"},{label:"Base form",permalink:"/docs/tags/base-form"},{label:"Example",permalink:"/docs/tags/example"},{label:"Examples",permalink:"/docs/tags/examples"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Base form example",id:"base-form",tags:["Learn","Getting started","Base form","Example","Examples"]},sidebar:"learnSidebar",previous:{title:"Core Principles",permalink:"/docs/learn/introduction/core-principles"},next:{title:"Form with yup validation example",permalink:"/docs/learn/examples/yup-form"}},p={},c=[];function f(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o,{}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { createArrayField, createForm } from '@effector-reform/core';\nimport { useForm } from '@effector-reform/react';\n\nconst form = createForm({\n  schema: {\n    a: 'string',\n    b: 0,\n    c: [] as number[],\n    d: {\n      e: 'string 2',\n      f: createArrayField<{ name: string }>([]),\n    },\n  },\n});\n\nexport const BaseForm = () => {\n  const { fields } = useForm(form);\n\n  return (\n    <>\n      <form>\n        <p>string field</p>\n        <input\n          value={fields.a.value}\n          onChange={(e) => fields.a.onChange(e.currentTarget.value)}\n        />\n\n        <p>number field</p>\n        <input\n          value={fields.b.value}\n          inputMode=\"numeric\"\n          onChange={(e) => fields.b.onChange(parseInt(e.currentTarget.value))}\n        />\n\n        <p>array field</p>\n        <div>\n          {fields.c.values.map((num, index) => (\n            <span onClick={() => fields.c.remove({ index })}>{num}</span>\n          ))}\n\n          <button type=\"button\" onClick={() => fields.c.push(Math.random())}>\n            add num\n          </button>\n        </div>\n\n        <p>field in group</p>\n        <input\n          value={fields.d.e.value}\n          onChange={(e) => fields.d.e.onChange(e.currentTarget.value)}\n        />\n\n        <p>array with subfields</p>\n        <div>\n          {fields.d.f.values.map((group) => (\n            <input\n              value={group.name.value}\n              onChange={(e) => group.name.onChange(e.currentTarget.value)}\n            />\n          ))}\n\n          <button type=\"button\" onClick={() => fields.d.f.push({ name: '' })}>\n            add friend\n          </button>\n        </div>\n      </form>\n    </>\n  );\n};\n"})})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(f,{...e})}):f(e)}}}]);