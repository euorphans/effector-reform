"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[259],{3669:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>u,toc:()=>g});var s=t(4848),r=t(8453),a=t(9084),o=t(6540),l=t(1807);const i=(0,a.Fv)("",{forkOnCreateForm:!1}),f=(0,a.DG)({schema:{name:i}});function m(){const e=(0,l.Mt)(i),{fields:n}=(0,l.mN)(f),[t,r]=(0,o.useState)(":(");return(0,o.useEffect)((()=>{"Edward"===e.value?r("Nice!"):r(":(")}),[e.value]),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("p",{children:'type "Edward"'}),(0,s.jsx)("input",{value:n.name.value,onChange:e=>n.name.onChange(e.currentTarget.value)}),(0,s.jsxs)("p",{children:["message: ",t]})]})}const d={sidebar_position:4,title:"Use field out of form",id:"field-out-of-form",tags:["Learn","Getting started","Use field out of form","Example","Examples"]},c=void 0,u={id:"learn/examples/field-out-of-form",title:"Use field out of form",description:"",source:"@site/docs/learn/examples/use-field-out-of-form.mdx",sourceDirName:"learn/examples",slug:"/learn/examples/field-out-of-form",permalink:"/docs/learn/examples/field-out-of-form",draft:!1,unlisted:!1,editUrl:"https://github.com/movpushmov/effector-reform/tree/main/docs/docs/learn/examples/use-field-out-of-form.mdx",tags:[{label:"Learn",permalink:"/docs/tags/learn"},{label:"Getting started",permalink:"/docs/tags/getting-started"},{label:"Use field out of form",permalink:"/docs/tags/use-field-out-of-form"},{label:"Example",permalink:"/docs/tags/example"},{label:"Examples",permalink:"/docs/tags/examples"}],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Use field out of form",id:"field-out-of-form",tags:["Learn","Getting started","Use field out of form","Example","Examples"]},sidebar:"learnSidebar",previous:{title:"Form with zod validation example",permalink:"/docs/learn/examples/zod-form"}},p={},g=[];function x(e){const n={code:"code",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(m,{}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { createField, createForm } from '@effector-reform/core';\nimport { useEffect, useState } from 'react';\nimport { useField, useForm } from '@effector-reform/react';\n\nconst name = createField<string>('', { forkOnCreateForm: false });\n\nconst form = createForm({\n  schema: {\n    name,\n  },\n});\n\nexport function FieldOutOfForm() {\n  const field = useField(name);\n  const { fields } = useForm(form);\n\n  const [message, setMessage] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (field.value === 'Edward') {\n      setMessage('Nice!');\n    } else {\n      setMessage(':(');\n    }\n  }, [field.value]);\n\n  return (\n    <>\n      <p>type \"Edward\"</p>\n\n      <input\n        value={fields.name.value}\n        onChange={(e) => fields.name.onChange(e.currentTarget.value)}\n      />\n\n      <p>message: {message}</p>\n    </>\n  );\n}\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}}}]);